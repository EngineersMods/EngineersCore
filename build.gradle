repositories {
    maven {
		name 'tesla'
        url 'http://maven.epoxide.xyz'
    }
	
	maven {
		name 'jei'
		url "http://dvs1.progwml6.com/files/maven"
    }
	
    maven {
		name "EnderIO"
		url "http://maven.tterrag.com"
    }
}




// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
version = "1.0"
group= "engineers.core" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "engineerscore"

sourceCompatibility = targetCompatibility = "1.6" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.6"
}

minecraft {
    version = "1.10.2-12.18.1.2094"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20160518"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

dependencies {
  //compile "net.darkhax.tesla:Tesla:1.10.2-1.2.1.49"
  runtime "mezz.jei:jei_1.10.2:3.8.1.242"
  deobfCompile "mezz.jei:jei_1.10.2:3.8.1.242:api"
  deobfCompile "com.enderio.core:EnderCore:1.10.2-0.4.1.56-beta"
  deobfCompile "com.enderio:EnderIO:1.10.2-3.0.1.112_beta"
  
}

import java.nio.file.Files

def createItemJSON() {
    File modelDirectory = new File("./src/main/resources/assets/" + archivesBaseName + "/models")
    File itemModelDirectory = new File("./src/main/resources/assets/" + archivesBaseName + "/models/item")
    if(!modelDirectory.exists()) modelDirectory.mkdir()
    if(!itemModelDirectory.exists()) itemModelDirectory.mkdir()

    File textureDirectory = new File("./src/main/resources/assets/" + archivesBaseName + "/textures/items")

    createJSONsForTextures(textureDirectory, "")
}

def createJSONsForTextures(File directory, String directoryPath) {
    for(File file: directory.listFiles()) {
        if(file.isDirectory()) {
            String newDirectoryPath = directoryPath;

            if(!newDirectoryPath.isEmpty()) {
                newDirectoryPath += "/"
            }
            newDirectoryPath += file.name

            String newDirectoryPathFileString = ".\\src\\main\\resources\\assets\\"+ archivesBaseName + "\\models\\item\\" + newDirectoryPath
            File newDirectoryPathFile = new File(newDirectoryPathFileString);
            if(!newDirectoryPathFile.exists()) {
                newDirectoryPathFile.mkdir();
            }

            createJSONsForTextures(file, newDirectoryPath)
        } else {
            String fileName = file.name
            String newFileName = ""
            for (Character aChar : fileName.toCharArray()) {
                if (Character.isUpperCase(aChar)) {
                    newFileName += "_" + aChar.toString().toLowerCase()
                } else {
                    newFileName += aChar
                }
            }

            if (newFileName.startsWith("item")) {
                newFileName = newFileName.replaceFirst("item", "")
            }
            if (newFileName.startsWith("_")) {
                newFileName = newFileName.replaceFirst("_", "")
            }

            Files.move(file.toPath(), file.toPath().resolveSibling(newFileName));

            newFileName = newFileName.replace(".png", "")
            newFileName = newFileName.replace(".mcmeta", "")

            if (!directoryPath.isEmpty() && !(directoryPath.endsWith("\\") || directoryPath.endsWith("/"))) {
                directoryPath += "\\";
            }
            String fileLocation = ".\\src\\main\\resources\\assets\\" +archivesBaseName+ "\\models\\item\\" + directoryPath +
                    newFileName.toString() + ".json"
            println(fileLocation)
            File jsonFile = new File(fileLocation);
            if (!jsonFile.exists()) {
                directoryPath = directoryPath.replace("\\", "/")
                jsonFile.createNewFile();
                String jsonString = '''{
    "parent":"item/generated",
    "textures":{
        "layer0":"''' + archivesBaseName + ":items/" + directoryPath + newFileName + '''"
    },
    "display": {
        "thirdperson": {
            "rotation": [ -90, 0, 0 ],
            "translation": [ 0, 1, -3 ],
            "scale": [ 0.55, 0.55, 0.55 ]
        },
        "firstperson": {
            "rotation": [ 0, -135, 25 ],
            "translation": [ 0, 4, 2 ],
            "scale": [ 1.7, 1.7, 1.7 ]
        }
    }
}
'''
                jsonFile << jsonString
            }
        }
    }
}
task makeJSONItems << {
	createItemJSON();
	print 'Finished making JSON for existing item textures';
}